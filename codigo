<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Giro - Controle de Fluxo de Caixa</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 50; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.5); /* Black w/ opacity */
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Login Container -->
    <div id="login-container" class="fixed inset-0 bg-gray-900 flex items-center justify-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-2xl w-full max-w-sm">
            <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Giro - Acesso Restrito</h2>
            <div id="login-error" class="text-red-500 text-sm mb-4 text-center hidden">Login ou senha inválidos.</div>
            <form id="login-form">
                <div class="mb-4">
                    <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Login</label>
                    <input type="text" id="username" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div class="mb-6">
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Senha</label>
                    <input type="password" id="password" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <button type="submit" class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                    Entrar
                </button>
            </form>
        </div>
    </div>

    <!-- App Container -->
    <div id="app-container" class="hidden p-4 md:p-8 max-w-7xl mx-auto">
        <header class="mb-8">
            <h1 class="text-4xl font-bold text-gray-900">Controle de Fluxo de Caixa</h1>
            <p class="text-gray-600 mt-1">Gerencie as transações e saldos entre suas empresas.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            <!-- Coluna da Esquerda: Cadastros e Lançamentos -->
            <div class="lg:col-span-1 space-y-8">
                <!-- Cadastro de Empresas -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">1. Cadastrar Empresas</h2>
                    <div class="flex gap-2">
                        <input type="text" id="company-name" placeholder="Nome da empresa" class="flex-grow w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        <button id="add-company-btn" class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition">Adicionar</button>
                    </div>
                    <ul id="company-list" class="mt-4 space-y-2 text-sm">
                        <!-- Empresas serão listadas aqui -->
                    </ul>
                </div>

                <!-- Controle de Aportes -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">2. Registrar/Editar Aporte</h2>
                    <p class="text-sm text-gray-600 mb-4">Defina o valor total que cada empresa irá movimentar. O valor é salvo automaticamente ao sair do campo.</p>
                    <div id="contributions-container" class="space-y-3">
                         <!-- Formulários de aporte por empresa serão gerados aqui -->
                    </div>
                </div>

                <!-- Lançamento de Transação -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">3. Lançar Transação</h2>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">De (Pagador)</label>
                            <select id="payer-select" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Para (Recebedor)</label>
                            <select id="receiver-select" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Valor (R$)</label>
                            <input type="number" id="transaction-amount" placeholder="Ex: 1500.50" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Nº da Nota Fiscal</label>
                            <input type="text" id="invoice-number" placeholder="Nº da NF" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        <div>
                             <div class="flex justify-between items-center">
                                <label class="block text-sm font-medium text-gray-700">Descrição</label>
                                <button id="generate-description-btn" type="button" class="text-xs text-indigo-600 hover:text-indigo-800 font-semibold flex items-center gap-1">
                                    ✨ Gerar com IA
                                </button>
                            </div>
                            <input type="text" id="transaction-description" placeholder="Breve descrição do pagamento" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                        </div>
                        <button id="add-transaction-btn" class="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition">Registrar Pagamento</button>
                    </div>
                </div>
            </div>

            <!-- Coluna da Direita: Saldos e Histórico -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Saldo Consolidado -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">Saldo Consolidado em Caixa</h2>
                    <div id="consolidated-balance" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                       <!-- Saldos serão exibidos aqui -->
                    </div>
                     <div class="mt-6">
                        <button id="analyze-flow-btn" class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition flex items-center justify-center gap-2">
                            ✨ Analisar Fluxo de Caixa com IA
                        </button>
                    </div>
                </div>

                <!-- Gráfico de Alocação de Capital -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">Gráfico de Alocação de Capital</h2>
                    <p class="text-sm text-gray-600 mb-4">O gráfico mostra o capital original de cada empresa e onde ele está alocado atualmente.</p>
                    <div class="relative h-96">
                         <canvas id="allocationChartCanvas"></canvas>
                    </div>
                </div>

                <!-- Histórico de Transações -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4 border-b pb-2">Histórico de Transações</h2>
                    <!-- Filtros -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Filtrar por Pagador</label>
                            <select id="filter-payer" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Todas</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Filtrar por Recebedor</label>
                            <select id="filter-receiver" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                                <option value="">Todas</option>
                            </select>
                        </div>
                        <div class="flex items-end">
                            <button id="clear-filters-btn" class="w-full bg-gray-500 text-white py-2 rounded-md hover:bg-gray-600 transition">Limpar Filtros</button>
                        </div>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">De</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Para</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valor</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">NF</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descrição</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                                </tr>
                            </thead>
                            <tbody id="transaction-history" class="bg-white divide-y divide-gray-200">
                                <!-- Histórico será inserido aqui -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal de Confirmação de Exclusão -->
    <div id="confirmation-modal" class="modal">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h3 class="text-lg font-medium leading-6 text-gray-900" id="modal-title">Confirmar Exclusão</h3>
            <div class="mt-2">
                <p class="text-sm text-gray-500">
                    Você tem certeza que deseja excluir esta transação? Esta ação não pode ser desfeita.
                </p>
            </div>
            <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                <button id="confirm-delete-btn" type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none sm:col-start-2 sm:text-sm">
                    Excluir
                </button>
                <button id="cancel-delete-btn" type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:col-start-1 sm:text-sm">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Edição de Transação -->
    <div id="edit-transaction-modal" class="modal">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg">
            <h3 class="text-lg font-medium leading-6 text-gray-900 mb-4">Editar Transação</h3>
            <form id="edit-transaction-form" class="space-y-4">
                <input type="hidden" id="edit-transaction-id">
                <div>
                    <label class="block text-sm font-medium text-gray-700">De (Pagador)</label>
                    <select id="edit-payer-select" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Para (Recebedor)</label>
                    <select id="edit-receiver-select" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Valor (R$)</label>
                    <input type="number" id="edit-transaction-amount" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Nº da Nota Fiscal</label>
                    <input type="text" id="edit-invoice-number" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Descrição</label>
                    <input type="text" id="edit-transaction-description" class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
            </form>
            <div class="mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense">
                <button id="save-edit-btn" type="button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none sm:col-start-2 sm:text-sm">
                    Salvar Alterações
                </button>
                <button id="cancel-edit-btn" type="button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none sm:mt-0 sm:col-start-1 sm:text-sm">
                    Cancelar
                </button>
            </div>
        </div>
    </div>
    
    <!-- Modal de Análise com IA -->
    <div id="ai-analysis-modal" class="modal">
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl max-h-[80vh] flex flex-col">
            <div class="flex justify-between items-center mb-4 border-b pb-3">
                <h3 class="text-lg font-medium leading-6 text-gray-900">✨ Análise do Fluxo de Caixa</h3>
                <button id="close-ai-modal-btn" class="text-gray-400 hover:text-gray-600">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
            </div>
            <div id="ai-analysis-content" class="text-sm text-gray-700 whitespace-pre-wrap overflow-y-auto">
                <!-- Conteúdo da análise será inserido aqui -->
            </div>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script type="module">
        // Importa as funções necessárias do SDK do Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getFirestore, collection, addDoc, onSnapshot, doc, deleteDoc, setDoc, getDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        // Configuração do Firebase da sua aplicação web
        const firebaseConfig = {
            apiKey: "AIzaSyBcJmJfNlmx6-DpnQxTRtIP8icbxZYfD7Y",
            authDomain: "aplicativo-de-pagamento-giro.firebaseapp.com",
            projectId: "aplicativo-de-pagamento-giro",
            storageBucket: "aplicativo-de-pagamento-giro.appspot.com",
            messagingSenderId: "704183756257",
            appId: "1:704183756257:web:f911997f19f559d644dea0",
            measurementId: "G-D38DS4EY9V"
        };
        
        // Inicializa o Firebase
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // --- Estado da Aplicação ---
        let companies = [];
        let transactions = [];
        let contributions = [];
        let transactionToDeleteId = null;
        let transactionToEditId = null;
        let allocationChart = null;


        // --- Elementos do DOM ---
        const loginContainer = document.getElementById('login-container');
        const appContainer = document.getElementById('app-container');
        const loginForm = document.getElementById('login-form');
        const loginError = document.getElementById('login-error');
        const companyNameInput = document.getElementById('company-name');
        const addCompanyBtn = document.getElementById('add-company-btn');
        const companyList = document.getElementById('company-list');
        const payerSelect = document.getElementById('payer-select');
        const receiverSelect = document.getElementById('receiver-select');
        const transactionAmountInput = document.getElementById('transaction-amount');
        const invoiceNumberInput = document.getElementById('invoice-number');
        const transactionDescriptionInput = document.getElementById('transaction-description');
        const addTransactionBtn = document.getElementById('add-transaction-btn');
        const consolidatedBalance = document.getElementById('consolidated-balance');
        const transactionHistory = document.getElementById('transaction-history');
        const contributionsContainer = document.getElementById('contributions-container');
        const filterPayer = document.getElementById('filter-payer');
        const filterReceiver = document.getElementById('filter-receiver');
        const clearFiltersBtn = document.getElementById('clear-filters-btn');
        const generateDescriptionBtn = document.getElementById('generate-description-btn');
        const analyzeFlowBtn = document.getElementById('analyze-flow-btn');
        
        // Modal de Exclusão
        const modal = document.getElementById('confirmation-modal');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');

        // Modal de Edição
        const editModal = document.getElementById('edit-transaction-modal');
        const editPayerSelect = document.getElementById('edit-payer-select');
        const editReceiverSelect = document.getElementById('edit-receiver-select');
        const editTransactionAmountInput = document.getElementById('edit-transaction-amount');
        const editInvoiceNumberInput = document.getElementById('edit-invoice-number');
        const editTransactionDescriptionInput = document.getElementById('edit-transaction-description');
        const saveEditBtn = document.getElementById('save-edit-btn');
        const cancelEditBtn = document.getElementById('cancel-edit-btn');
        
        // Modal de Análise IA
        const aiAnalysisModal = document.getElementById('ai-analysis-modal');
        const aiAnalysisContent = document.getElementById('ai-analysis-content');
        const closeAiModalBtn = document.getElementById('close-ai-modal-btn');


        // --- Funções de Formatação ---
        const formatCurrency = (value) => {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL',
            }).format(value);
        };
        
        // --- Lógica de Login ---
        loginForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (username === 'Luan' && password === 'Giro123') {
                loginContainer.classList.add('hidden');
                appContainer.classList.remove('hidden');
                initializeAppLogic();
            } else {
                loginError.classList.remove('hidden');
            }
        });

        // --- Lógica Principal da Aplicação ---
        function initializeAppLogic() {
            // Listeners do Firebase (tempo real)
            onSnapshot(collection(db, 'companies'), (snapshot) => {
                companies = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })).sort((a, b) => a.name.localeCompare(b.name));
                renderAll();
            });

            onSnapshot(collection(db, 'transactions'), (snapshot) => {
                transactions = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });

            onSnapshot(collection(db, 'contributions'), (snapshot) => {
                contributions = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                renderAll();
            });
        }
        
        // --- Funções de Renderização e Cálculo ---
        function renderAll() {
            const balances = calculateBalances();
            renderCompanyList();
            renderSelectOptions();
            renderContributions();
            renderConsolidatedBalance(balances);
            renderTransactionHistory();
            renderAllocationChart(balances);
        }
        
        function calculateBalances() {
            const balances = {};
            companies.forEach(c => {
                balances[c.name] = { total: 0, from: {} };
            });

            contributions.forEach(contrib => {
                if (balances[contrib.companyName]) {
                    balances[contrib.companyName].total += contrib.amount;
                    const fromMap = balances[contrib.companyName].from;
                    fromMap[contrib.companyName] = (fromMap[contrib.companyName] || 0) + contrib.amount;
                }
            });

            const sortedTransactions = [...transactions].sort((a, b) => (a.timestamp?.toDate() || 0) - (b.timestamp?.toDate() || 0));
            
            sortedTransactions.forEach(t => {
                const payerName = t.payer;
                const receiverName = t.receiver;
                const amount = t.amount;

                if (!balances[payerName] || !balances[receiverName]) return; 

                const payerBalance = balances[payerName];
                const receiverBalance = balances[receiverName];
                const payerTotalFrom = Object.values(payerBalance.from).reduce((sum, val) => sum + val, 0);

                if (payerTotalFrom <= 0) return;

                const transferBreakdown = {};
                for (const [originCompany, originAmount] of Object.entries(payerBalance.from)) {
                    if (originAmount > 0) {
                        const proportion = originAmount / payerTotalFrom;
                        const transferAmountFromOrigin = amount * proportion;
                        transferBreakdown[originCompany] = (transferBreakdown[originCompany] || 0) + transferAmountFromOrigin;
                    }
                }

                for (const [originCompany, transferAmount] of Object.entries(transferBreakdown)) {
                    payerBalance.from[originCompany] = (payerBalance.from[originCompany] || 0) - transferAmount;
                    receiverBalance.from[originCompany] = (receiverBalance.from[originCompany] || 0) + transferAmount;
                }
                
                payerBalance.total -= amount;
                receiverBalance.total += amount;
            });
            return balances;
        }

        function renderCompanyList() {
            companyList.innerHTML = companies.length > 0 
                ? companies.map(c => `<li class="bg-gray-100 p-2 rounded">${c.name}</li>`).join('')
                : '<li class="text-gray-500">Nenhuma empresa cadastrada.</li>';
        }

        function renderSelectOptions() {
            const optionsHTML = companies.map(c => `<option value="${c.name}">${c.name}</option>`).join('');
            payerSelect.innerHTML = optionsHTML;
            receiverSelect.innerHTML = optionsHTML;
            editPayerSelect.innerHTML = optionsHTML;
            editReceiverSelect.innerHTML = optionsHTML;
            filterPayer.innerHTML = '<option value="">Todas</option>' + optionsHTML;
            filterReceiver.innerHTML = '<option value="">Todas</option>' + optionsHTML;
        }

        function renderContributions() {
            contributionsContainer.innerHTML = companies.map(company => {
                const contribution = contributions.find(c => c.companyName === company.name);
                const value = contribution ? contribution.amount : '';
                return `
                <div>
                    <label class="block text-sm font-medium text-gray-700">${company.name}</label>
                    <div class="flex items-center gap-2 mt-1 relative">
                        <span class="text-gray-500 absolute left-3 z-10">R$</span>
                        <input type="number" data-company="${company.name}" value="${value}" placeholder="Valor do aporte" class="contribution-input pl-10 flex-grow w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    </div>
                </div>
                `;
            }).join('');
        }
        
        function renderConsolidatedBalance(balances) {
            consolidatedBalance.innerHTML = Object.entries(balances).map(([name, data]) => {
                const detailsId = `details-${name.replace(/\s+/g, '-')}`;
                const detailsHTML = Object.entries(data.from)
                    .filter(([_, value]) => Math.abs(value) > 0.001)
                    .map(([fromCompany, value]) => `
                        <li class="flex justify-between text-gray-600">
                            <span>Origem: ${fromCompany}</span>
                            <span class="${value >= 0 ? 'text-green-600' : 'text-red-600'}">${formatCurrency(value)}</span>
                        </li>`)
                    .join('');

                return `
                    <div class="bg-gray-50 p-4 rounded-lg border">
                        <div class="flex justify-between items-center">
                            <span class="font-semibold text-lg">${name}</span>
                            <span class="font-bold text-2xl ${data.total >= 0 ? 'text-green-700' : 'text-red-700'}">
                                ${formatCurrency(data.total)}
                            </span>
                        </div>
                        ${detailsHTML ? `
                        <div class="mt-4">
                           <button class="text-indigo-600 text-sm hover:underline" onclick="document.getElementById('${detailsId}').classList.toggle('hidden')">Ver Detalhes</button>
                           <ul id="${detailsId}" class="mt-2 space-y-1 text-sm hidden border-t pt-2">
                                ${detailsHTML}
                           </ul>
                        </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
        }

        function renderTransactionHistory() {
            const payerFilter = filterPayer.value;
            const receiverFilter = filterReceiver.value;

            const filteredTransactions = transactions.filter(t => {
                const payerMatch = !payerFilter || t.payer === payerFilter;
                const receiverMatch = !receiverFilter || t.receiver === receiverFilter;
                return payerMatch && receiverMatch;
            }).sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0)); 

            transactionHistory.innerHTML = filteredTransactions.map(t => `
                <tr class="text-sm">
                    <td class="px-4 py-3">${t.payer}</td>
                    <td class="px-4 py-3">${t.receiver}</td>
                    <td class="px-4 py-3 font-medium text-gray-900">${formatCurrency(t.amount)}</td>
                    <td class="px-4 py-3 text-gray-500">${t.invoice}</td>
                    <td class="px-4 py-3 text-gray-500 truncate" title="${t.description || ''}">${(t.description || '').substring(0,20)}${(t.description || '').length > 20 ? '...' : ''}</td>
                    <td class="px-4 py-3">
                        <div class="flex items-center space-x-3">
                            <button data-id="${t.id}" class="edit-transaction-btn text-indigo-600 hover:text-indigo-800" title="Editar">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" /></svg>
                            </button>
                            <button data-id="${t.id}" class="delete-transaction-btn text-red-600 hover:text-red-800" title="Excluir">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clip-rule="evenodd" /></svg>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function getChartColors(numColors) {
            const colors = [
                '#4F46E5', '#10B981', '#F59E0B', '#EF4444', '#6366F1', '#3B82F6',
                '#8B5CF6', '#EC4899', '#F97316', '#14B8A6', '#D946EF', '#06B6D4'
            ];
            // Repete o padrão de cores se precisar de mais do que o disponível
            return Array.from({ length: numColors }, (_, i) => colors[i % colors.length]);
        }

        function renderAllocationChart(balances) {
            const ctx = document.getElementById('allocationChartCanvas').getContext('2d');
            if (allocationChart) {
                allocationChart.destroy();
            }
            
            const contributingCompanies = contributions.filter(c => c.amount > 0);
            if (contributingCompanies.length === 0) {
                return;
            }

            const labels = contributingCompanies.map(c => c.companyName);
            const locationCompanies = [...new Set(companies.map(c => c.name))];
            
            const colors = getChartColors(locationCompanies.length);
            const locationColorMap = new Map(locationCompanies.map((loc, i) => [loc, colors[i]]));
            
            const datasets = locationCompanies.map(location => {
                const data = labels.map(origin => {
                    return balances[location]?.from?.[origin] || 0;
                });
                return {
                    label: `Alocado em ${location}`,
                    data: data,
                    backgroundColor: locationColorMap.get(location),
                };
            });
            
            allocationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Distribuição do Capital Aportado'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += formatCurrency(context.parsed.y);
                                    }
                                    return label;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Capital Original (Aporte)'
                            }
                        },
                        y: {
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Valor Alocado (R$)'
                            },
                             ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    }
                }
            });
        }
        
        // --- Manipuladores de Eventos ---
        addCompanyBtn.addEventListener('click', async () => {
            const name = companyNameInput.value.trim();
            if (name && !companies.some(c => c.name.toLowerCase() === name.toLowerCase())) {
                await addDoc(collection(db, 'companies'), { name });
                companyNameInput.value = '';
            } else if (!name) {
                alert("O nome da empresa não pode estar vazio.");
            } else {
                alert("Essa empresa já foi cadastrada.");
            }
        });

        addTransactionBtn.addEventListener('click', async () => {
            const payer = payerSelect.value;
            const receiver = receiverSelect.value;
            const amount = parseFloat(transactionAmountInput.value);
            const invoice = invoiceNumberInput.value.trim();
            const description = transactionDescriptionInput.value.trim();

            if (!payer || !receiver || !amount || !invoice) {
                alert('Preencha todos os campos obrigatórios (Pagador, Recebedor, Valor, NF).');
                return;
            }
            if (payer === receiver) {
                alert('A empresa pagadora e a recebedora não podem ser a mesma.');
                return;
            }

            await addDoc(collection(db, 'transactions'), {
                payer, receiver, amount, invoice, description, timestamp: new Date()
            });

            transactionAmountInput.value = '';
            invoiceNumberInput.value = '';
            transactionDescriptionInput.value = '';
        });

        contributionsContainer.addEventListener('change', async (e) => {
            if (e.target.classList.contains('contribution-input')) {
                const companyName = e.target.dataset.company;
                const amount = parseFloat(e.target.value) || 0;
                
                const existingContribution = contributions.find(c => c.companyName === companyName);
                if (existingContribution) {
                    await updateDoc(doc(db, 'contributions', existingContribution.id), { amount });
                } else {
                    await addDoc(collection(db, 'contributions'), { companyName, amount });
                }
            }
        });

        filterPayer.addEventListener('change', renderTransactionHistory);
        filterReceiver.addEventListener('change', renderTransactionHistory);
        clearFiltersBtn.addEventListener('click', () => {
            filterPayer.value = '';
            filterReceiver.value = '';
            renderTransactionHistory();
        });
        
        document.body.addEventListener('click', (e) => {
            const deleteButton = e.target.closest('.delete-transaction-btn');
            if (deleteButton) {
                transactionToDeleteId = deleteButton.dataset.id;
                modal.style.display = 'flex';
            }

            const editButton = e.target.closest('.edit-transaction-btn');
            if (editButton) {
                transactionToEditId = editButton.dataset.id;
                const transaction = transactions.find(t => t.id === transactionToEditId);
                if (transaction) {
                    editPayerSelect.value = transaction.payer;
                    editReceiverSelect.value = transaction.receiver;
                    editTransactionAmountInput.value = transaction.amount;
                    editInvoiceNumberInput.value = transaction.invoice;
                    editTransactionDescriptionInput.value = transaction.description;
                    editModal.style.display = 'flex';
                }
            }
        });

        cancelDeleteBtn.addEventListener('click', () => {
            transactionToDeleteId = null;
            modal.style.display = 'none';
        });

        confirmDeleteBtn.addEventListener('click', async () => {
            if (transactionToDeleteId) {
                await deleteDoc(doc(db, "transactions", transactionToDeleteId));
                transactionToDeleteId = null;
                modal.style.display = 'none';
            }
        });
        
        cancelEditBtn.addEventListener('click', () => {
            transactionToEditId = null;
            editModal.style.display = 'none';
        });

        saveEditBtn.addEventListener('click', async () => {
            if (!transactionToEditId) return;

            const payer = editPayerSelect.value;
            const receiver = editReceiverSelect.value;
            const amount = parseFloat(editTransactionAmountInput.value);
            const invoice = invoiceNumberInput.value.trim();
            const description = editTransactionDescriptionInput.value.trim();

            if (!payer || !receiver || !amount || !invoice) {
                alert('Preencha todos os campos obrigatórios.');
                return;
            }
            if (payer === receiver) {
                alert('A empresa pagadora e a recebedora não podem ser a mesma.');
                return;
            }

            const transactionRef = doc(db, "transactions", transactionToEditId);
            await updateDoc(transactionRef, {
                payer, receiver, amount, invoice, description
            });

            transactionToEditId = null;
            editModal.style.display = 'none';
        });
        
        // --- Lógica da API Gemini ---
        const apiKey = ""; // Chave de API é gerenciada pelo ambiente
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        async function callGemini(prompt) {
            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
            };
            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                if (!response.ok) {
                    throw new Error(`API Error: ${response.statusText}`);
                }
                const result = await response.json();
                return result.candidates?.[0]?.content?.parts?.[0]?.text || "Não foi possível obter uma resposta da IA.";
            } catch (error) {
                console.error("Erro ao chamar a API Gemini:", error);
                return "Erro de comunicação com a IA. Tente novamente mais tarde.";
            }
        }

        generateDescriptionBtn.addEventListener('click', async () => {
            const payer = payerSelect.value;
            const receiver = receiverSelect.value;
            const amount = transactionAmountInput.value;
            const invoice = invoiceNumberInput.value;

            if(!payer || !receiver || !amount || !invoice) {
                alert('Preencha os campos de Pagador, Recebedor, Valor e NF para gerar uma descrição.');
                return;
            }
            
            const originalText = generateDescriptionBtn.innerHTML;
            generateDescriptionBtn.disabled = true;
            generateDescriptionBtn.innerHTML = 'Gerando...';

            const prompt = `Gere uma descrição curta e formal para uma transação financeira com os seguintes dados: Pagador: ${payer}, Recebedor: ${receiver}, Valor: ${formatCurrency(amount)}, Nota Fiscal: ${invoice}. A descrição deve ter no máximo uma linha.`;
            const description = await callGemini(prompt);
            transactionDescriptionInput.value = description.replace(/(\r\n|\n|\r)/gm, ""); // Remove new lines

            generateDescriptionBtn.disabled = false;
            generateDescriptionBtn.innerHTML = originalText;
        });
        
        analyzeFlowBtn.addEventListener('click', async () => {
            const originalText = analyzeFlowBtn.innerHTML;
            analyzeFlowBtn.disabled = true;
            analyzeFlowBtn.innerHTML = 'Analisando...';
            
            aiAnalysisContent.innerHTML = '<p class="text-center">Analisando dados e gerando insights...</p>';
            aiAnalysisModal.style.display = 'flex';

            const balances = calculateBalances();
            const dataForPrompt = {
                empresas: companies.map(c => c.name),
                aportes: contributions,
                transacoes: transactions.map(t => ({ de: t.payer, para: t.receiver, valor: t.amount })),
                saldosFinais: balances
            };

            const prompt = `
                Aja como um analista financeiro. Analise os seguintes dados de fluxo de caixa em formato JSON e forneça um resumo conciso em português do Brasil, usando tópicos (bullet points com asteriscos).

                **Dados:**
                ${JSON.stringify(dataForPrompt, null, 2)}

                **Seu resumo deve destacar:**
                1.  **Visão Geral:** Um parágrafo curto sobre o estado geral do fluxo de caixa.
                2.  **Maiores Movimentações:** A empresa que mais realizou pagamentos (total) e a que mais recebeu (total).
                3.  **Maior Transação:** Qual foi a maior transação individual (pagador, recebedor e valor).
                4.  **Saldos:** A empresa com o maior e o menor saldo final em caixa.
                5.  **Observações:** Qualquer padrão ou observação interessante que você identificar (ex: uma empresa que só paga e não recebe, ou uma que centraliza os recebimentos).

                Formate sua resposta de forma clara e organizada.
            `;
            
            const analysis = await callGemini(prompt);
            aiAnalysisContent.textContent = analysis;

            analyzeFlowBtn.disabled = false;
            analyzeFlowBtn.innerHTML = originalText;
        });
        
        closeAiModalBtn.addEventListener('click', () => {
            aiAnalysisModal.style.display = 'none';
        });

    </script>
</body>
</html>
